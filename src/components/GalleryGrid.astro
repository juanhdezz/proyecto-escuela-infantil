---
interface Image {
  url: string;
  alt: string;
}

export interface Props {
  images: Image[];
}

const { images } = Astro.props;
---

<div class="gallery">
  <!-- Image Grid -->
  <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 gallery-container">
    {images.map((image, index) => (
      <div class="gallery-item overflow-hidden rounded-lg shadow-md cursor-pointer transition-transform hover:scale-105">
        <img 
          src={image.url} 
          alt={image.alt} 
          class="w-full h-64 object-cover" 
          loading={index < 8 ? "eager" : "lazy"}
          data-full={image.url}
        />
      </div>
    ))}
  </div>
</div>

<div id="galleryModal" class="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black bg-opacity-90 opacity-0 pointer-events-none transition-opacity duration-300">
  <button id="closeModal" class="absolute top-4 right-4 text-white text-4xl">&times;</button>
  <button id="prevImage" class="absolute left-4 text-white text-4xl">&lt;</button>
  <button id="nextImage" class="absolute right-4 text-white text-4xl">&gt;</button>
  <img id="modalImage" class="max-w-full max-h-[90vh] object-contain" src="" alt="Gallery image" />
</div>

<script>
  // Gallery modal
  const modal = document.getElementById('galleryModal');
  const modalImage = document.getElementById('modalImage');
  const closeModal = document.getElementById('closeModal');
  const prevButton = document.getElementById('prevImage');
  const nextButton = document.getElementById('nextImage');
  const galleryItems = document.querySelectorAll('.gallery-item');
  
  let currentIndex = 0;
  const images = Array.from(galleryItems).map(item => ({
    src: item.querySelector('img').getAttribute('data-full'),
    alt: item.querySelector('img').getAttribute('alt')
  }));
  
  // Open modal
  galleryItems.forEach((item, index) => {
    item.addEventListener('click', () => {
      currentIndex = index;
      updateModalImage();
      modal.classList.add('opacity-100');
      modal.classList.remove('pointer-events-none');
      document.body.style.overflow = 'hidden';
    });
  });
  
  // Close modal
  closeModal.addEventListener('click', () => {
    modal.classList.remove('opacity-100');
    modal.classList.add('pointer-events-none');
    document.body.style.overflow = '';
  });
  
  // Navigate images
  prevButton.addEventListener('click', () => {
    currentIndex = (currentIndex - 1 + images.length) % images.length;
    updateModalImage();
  });
  
  nextButton.addEventListener('click', () => {
    currentIndex = (currentIndex + 1) % images.length;
    updateModalImage();
  });
  
  // Update modal image
  function updateModalImage() {
    modalImage.src = images[currentIndex].src;
    modalImage.alt = images[currentIndex].alt;
  }
  
  // Close on ESC key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      closeModal.click();
    } else if (e.key === 'ArrowLeft') {
      prevButton.click();
    } else if (e.key === 'ArrowRight') {
      nextButton.click();
    }
  });
</script>